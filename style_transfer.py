# -*- coding: utf-8 -*-
"""Style_Transfer.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1tn5HzL_hLJJA6qEQZnPqNenQe3uOzorH
"""

from __future__ import print_function

import time
from PIL import Image
import numpy as np

from keras import backend
from keras.models import Model
from keras.applications.vgg16 import VGG16

from scipy.optimize import fmin_l_bfgs_b
import matplotlib.pyplot as plt
import shutil
import cv2
from google.colab.patches import cv2_imshow

#Irgb = cv2.imread('choco_mockup4.jpeg')
#gray = cv2.cvtColor(Irgb, cv2.COLOR_BGR2GRAY)
#R, G, B = cv2.split(Irgb)
#ret, Ithres = cv2.threshold(gray,100,255,cv2.THRESH_BINARY)
#contours, hierarchy = cv2.findContours(Ithres,cv2.RETR_TREE,cv2.CHAIN_APPROX_SIMPLE )
#maxContour = 0
#for contour in contours:
#    contourSize = cv2.contourArea(contour)
#    if contourSize > maxContour:
#        maxContour = contourSize
#       maxContourData = contour
#mask = np.zeros_like(Ithres)
#cv2.fillPoly(mask,[maxContourData],1)
#finalImage = np.zeros_like(Irgb)
#finalImage[:,:,0] = np.multiply(R,mask)
#finalImage[:,:,1] = np.multiply(G,mask)
#finalImage[:,:,2] = np.multiply(B,mask)
#cv2_imshow(finalImage)
#detected_img = Image.fromarray(finalImage)
#detected_img.save('drive/My Drive/Style_transfer/4/detected_img.png')

height = 256
width = 256
content_image_path = 'landscape.jpeg'
content_image = Image.open(content_image_path)
content_image = content_image.resize((width, height))
content_image

style_image_path = 'starry_nights.jpg'
style_image = Image.open(style_image_path)
style_image = style_image.resize((width, height))
style_image

#shutil.copy(content_image_path, 'drive/My Drive/Style_transfer/9')
#shutil.copy(style_image_path, 'drive/My Drive/Style_transfer/9')

content_array = np.asarray(content_image, dtype='float32')
content_array = np.expand_dims(content_array, axis=0)
print(content_array.shape)
style_array = np.asarray(style_image, dtype='float32')
style_array = np.expand_dims(style_array, axis=0)
print(style_array.shape)

content_array[:, :, :, 0] -= 103.939
content_array[:, :, :, 1] -= 116.779
content_array[:, :, :, 2] -= 123.68
content_array = content_array[:, :, :, ::-1]

style_array[:, :, :, 0] -= 103.939
style_array[:, :, :, 1] -= 116.779
style_array[:, :, :, 2] -= 123.68
style_array = style_array[:, :, :, ::-1]

content_image = backend.variable(content_array)
style_image = backend.variable(style_array)
combination_image = backend.placeholder((1, height, width, 3))

input_tensor = backend.concatenate([content_image, style_image, combination_image], axis=0)

model = VGG16(input_tensor=input_tensor, weights='imagenet',include_top=False)

layers = dict([(layer.name, layer.output) for layer in model.layers])

content_weight = 0.1
style_weight = 4.0
total_variation_weight = 1.0

loss = backend.variable(0.)

def content_loss(content, combination):
    return backend.sum(backend.square(combination - content))

layer_features = layers['block2_conv2']
content_image_features = layer_features[0, :, :, :]
combination_features = layer_features[2, :, :, :]

loss += content_weight * content_loss(content_image_features,
                                      combination_features)

def gram_matrix(x):
    features = backend.batch_flatten(backend.permute_dimensions(x, (2, 0, 1)))
    gram = backend.dot(features, backend.transpose(features))
    return gram

def style_loss(style, combination):
    S = gram_matrix(style)
    C = gram_matrix(combination)
    channels = 3
    size = height * width
    return backend.sum(backend.square(S - C)) / (4. * (channels ** 2) * (size ** 2))

feature_layers = ['block1_conv2', 'block2_conv2','block3_conv3', 'block4_conv3', 'block5_conv3']
for layer_name in feature_layers:
    layer_features = layers[layer_name]
    style_features = layer_features[1, :, :, :]
    combination_features = layer_features[2, :, :, :]
    sl = style_loss(style_features, combination_features)
    loss += (style_weight / len(feature_layers)) * sl

def total_variation_loss(x):
    a = backend.square(x[:, :height-1, :width-1, :] - x[:, 1:, :width-1, :])
    b = backend.square(x[:, :height-1, :width-1, :] - x[:, :height-1, 1:, :])
    return backend.sum(backend.pow(a + b, 1.25))

loss += total_variation_weight * total_variation_loss(combination_image)

grads = backend.gradients(loss, combination_image)

outputs = [loss]
outputs += grads
f_outputs = backend.function([combination_image], outputs)

def eval_loss_and_grads(x):
    x = x.reshape((1, height, width, 3))
    outs = f_outputs([x])
    loss_value = outs[0]
    grad_values = outs[1].flatten().astype('float64')
    return loss_value, grad_values

class Evaluator(object):

    def __init__(self):
        self.loss_value = None
        self.grads_values = None

    def loss(self, x):
        assert self.loss_value is None
        loss_value, grad_values = eval_loss_and_grads(x)
        self.loss_value = loss_value
        self.grad_values = grad_values
        return self.loss_value

    def grads(self, x):
        assert self.loss_value is not None
        grad_values = np.copy(self.grad_values)
        self.loss_value = None
        self.grad_values = None
        return grad_values

evaluator = Evaluator()

x = np.random.uniform(0, 255, (1, height, width, 3)) - 128.

iterations = 15

for i in range(iterations):
    print('Start of iteration', i)
    start_time = time.time()
    x, min_val, info = fmin_l_bfgs_b(evaluator.loss, x.flatten(), fprime=evaluator.grads, maxfun=20)
    print('Current loss value:', min_val)
    end_time = time.time()
    print('Iteration %d completed in %ds' % (i, end_time - start_time))

x = x.reshape((height, width, 3))
x = x[:, :, ::-1]
x[:, :, 0] += 103.939
x[:, :, 1] += 116.779
x[:, :, 2] += 123.68
x = np.clip(x, 0, 255).astype('uint8')

x = Image.fromarray(x)
x

comb = Image.fromarray(x)
comb.save('/content/sample_data/t1.png')
comb = comb.resize((512, 512))
comb


# def masking(originalImage, mask):
#     [rows, columns, channels] = originalImage.shape
#     result = np.zeros((rows,columns,channels))
#     for row in range(rows):
#         for column in range(columns):
#             if(mask[row,column].all()==0):
#                 result[row,column]= 0
#             else:
#                 result[row,column] = originalImage[row,column]
#     return result

# content_image_path = '/content/drive/My Drive/Style_transfer/8/detected_img.png'
# content = cv2.imread(content_image_path)

# mask = np.asarray(content)
# comb = comb.resize((268,188))
# result = np.asarray(comb)

# output = masking(result, mask)

# output = np.clip(output, 0, 255).astype('uint8')
# out = Image.fromarray(output)
# #out.save('/content/drive/My Drive/Style_transfer/9/cropped.png')
# out
